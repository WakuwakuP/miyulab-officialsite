name: 'Copilot Setup Steps'

# Allow testing of the setup steps from your repository's "Actions" tab.
on: workflow_dispatch

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      issues: read
      pull-requests: write
      contents: read

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Check and fix PR title format
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const { execSync } = require('child_process');
            const currentBranch = execSync('git rev-parse --abbrev-ref HEAD', { encoding: 'utf-8' }).trim();
            console.log(`Current branch: ${currentBranch}`);

            // main/masterはスキップ
            if (currentBranch === 'main' || currentBranch === 'master') {
              console.log('ℹ️ On main/master branch. Skipping PR title check.');
              return;
            }

            // ブランチ名からissue番号抽出
            let issueNumber = null;
            const branchIssueMatch = currentBranch.match(/(\d+)$/);
            if (branchIssueMatch) {
              issueNumber = parseInt(branchIssueMatch[1]);
              console.log(`Found issue reference in branch name: #${issueNumber}`);
            } else {
              console.log('⚠️ Could not find issue number in branch name. Skipping PR title update.');
              return;
            }

            // Linear Issue ID取得
            try {
              const { data: comments } = await github.rest.issues.listComments({
                owner,
                repo,
                issue_number: issueNumber
              });
              console.log(`Found ${comments.length} comments for issue #${issueNumber}`);
              let linearIssueId = null;
              for (const comment of comments) {
                if (comment.user.login === 'linear[bot]') {
                  console.log(`Linear bot comment: ${comment.body}`);
                  const linearIdMatch = comment.body.match(/>([A-Z]+-\d+)\s+/);
                  if (linearIdMatch) {
                    linearIssueId = linearIdMatch[1];
                    console.log(`Found Linear Issue ID: ${linearIssueId}`);
                    break;
                  }
                }
              }
              if (!linearIssueId) {
                console.log('⚠️ Could not find Linear Issue ID in issue comments.');
                return;
              }
              // PR検索
              try {
                const { data: pulls } = await github.rest.pulls.list({
                  owner,
                  repo,
                  head: `${owner}:${currentBranch}`,
                  state: 'open'
                });
                if (pulls.length > 0) {
                  const pr = pulls[0];
                  const prNumber = pr.number;
                  const currentTitle = pr.title;
                  console.log(`Found open PR #${prNumber}: "${currentTitle}"`);
                  const linearIdPattern = /^[A-Z]+-\d+\s+/;
                  if (linearIdPattern.test(currentTitle)) {
                    console.log('✅ PR title already follows the correct format');
                    return;
                  }
                  const newTitle = `${linearIssueId} ${currentTitle.trim()}`;
                  await github.rest.pulls.update({
                    owner,
                    repo,
                    pull_number: prNumber,
                    title: newTitle
                  });
                  console.log(`✅ Updated PR title from "${currentTitle}" to "${newTitle}"`);
                  // PRコメント追加・既存コメント非表示
                  const { data: prComments } = await github.rest.issues.listComments({
                    owner,
                    repo,
                    issue_number: prNumber,
                  });
                  for (const comment of prComments) {
                    if (
                      comment.user.login === 'github-actions[bot]' &&
                      comment.body &&
                      comment.body.includes('PRタイトルを自動的に更新しました')
                    ) {
                      try {
                        await github.graphql(`
                          mutation {
                            minimizeComment(input: { subjectId: \"${comment.node_id}\", classifier: OUTDATED }) {
                              minimizedComment {
                                isMinimized
                                minimizedReason
                              }
                            }
                          }
                        `);
                      } catch (e) {
                        console.log('コメント非表示化に失敗:', e.message);
                      }
                    }
                  }
                  await github.rest.issues.createComment({
                    owner,
                    repo,
                    issue_number: prNumber,
                    body: `🤖 PRタイトルを自動的に更新しました:\n\n**変更前**: ${currentTitle}\n**変更後**: ${newTitle}\n\nLinear Issue ID (${linearIssueId}) を先頭に追加して、プロジェクトの命名規則に準拠させました。`
                  });
                } else {
                  console.log(`ℹ️ No open PR found for branch ${currentBranch}. Linear Issue ID found: ${linearIssueId}`);
                  console.log(`💡 When you create a PR, use this title format: "${linearIssueId} <your title>"`);
                }
              } catch (error) {
                console.error(`Error finding/updating PR:`, error);
                console.log(`💡 Linear Issue ID for this branch: ${linearIssueId}`);
              }
            } catch (error) {
              console.error(`Error processing issue #${issueNumber}:`, error);
              console.log('⚠️ Failed to get issue information');
            }

      - run: corepack enable yarn

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn

      - name: install dependencies
        run: yarn --immutable
