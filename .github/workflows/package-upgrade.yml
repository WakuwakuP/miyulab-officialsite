name: Weekly Package Upgrade

on:
  schedule:
    # JST 07:00 on Monday (UTC 22:00 on Sunday)
    - cron: '0 22 * * SUN'
  workflow_dispatch: # Allow manual triggering for testing

jobs:
  create-upgrade-issue:
    runs-on: ubuntu-latest

    permissions:
      issues: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create package upgrade issue
        id: create_issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ISSUE_ASSIGN_TO_COPILOT_PAT }}
          script: |
            const issueBody = `## パッケージアップグレード自動化タスク

            @copilot

            ### 実行内容

            以下の手順でパッケージのアップグレードを行ってください：

            #### 1. アップグレード可能なパッケージのリストアップ
            \`\`\`bash
            yarn outdated
            \`\`\`

            #### 2. パッケージのアップグレード戦略
            - パッケージとそのタイプパッケージ（@types/*）をセットとして扱う
            - 1つずつアップグレードして、各回で動作確認を行う
            - メジャーバージョンアップは慎重に行う

            #### 3. 各アップグレード後の確認手順
            以下のコマンドを**必ず**この順序で実行してください：

            \`\`\`bash
            # 1. DBスキーマ更新 (zenstack関連、prisma関連 更新時)
            yarn db:generate

            # 2. フォーマット
            yarn format

            # 3. リント
            yarn lint

            # 4. テスト
            yarn test:run

            # 5. ビルド
            yarn build

            # 6. Storybookビルド
            yarn build-storybook
            \`\`\`

            #### 4. エラー対応
            - ビルドに失敗する場合は、エラーメッセージを分析して修正する
            - 型エラーや互換性の問題を適切に解決する
            - 必要に応じて設定ファイル（tsconfig.json、eslint.config.mjs等）を調整する

            #### 5. PR作成の注意点
            - 各パッケージアップグレードは個別のPRとして作成するか、関連するパッケージをまとめてPRを作成する
            - PR説明には何がアップグレードされたか、どんな変更が必要だったかを明記する
            - 破壊的変更がある場合は詳細に説明する

            #### 6. 重要なルール
            - **フォーマットは最優先**: コード変更後は必ず \`yarn format\` を実行
            - **設定ファイル変更の制限**: 特に指示がない限り tsconfig.json, next.config.ts 等は変更しない
            - **baseUrlでの絶対パス**: src配下のインポートは \`lib/auth\` のような絶対パスを使用
            - **shadcn/uiの活用**: UIコンポーネントは既存のshadcn/uiを優先使用

            ### 除外すべきパッケージ
            以下のパッケージは慎重に扱うか、アップグレードを控える：
            - Next.js（メジャーバージョンアップは検討が必要）
            - React/React DOM（メジャーバージョンアップは慎重に）
            - データベース関連パッケージ（ZenStack、Prisma等、更新時は db:generate を実行する）

            ---

            **作成日時**: ${new Date().toLocaleString('ja-JP', {timeZone: 'Asia/Tokyo'})} JST
            **実行予定**: 週次自動実行
            `;

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `週次パッケージアップグレード - ${new Date().toLocaleDateString('ja-JP')}`,
              body: issueBody,
              labels: ['dependencies', 'copilot']
            });

            console.log(`Created issue #${issue.data.number}: ${issue.data.title}`);

            // Set issue number as output for the next step
            core.setOutput('issue_number', issue.data.number);
